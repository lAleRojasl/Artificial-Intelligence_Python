#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    May 15, 2017 12:02:04 AM
import sys
from MNISTLoader import MNIST
from displayData import displayData
from calcWeights import calcWeights
import numpy as np
from Tkinter import *
import threading as THD

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = MainUI (root)
    root.mainloop()

w = None


class MainUI():
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = 'wheat'  # X11 color: #f5deb3
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("900x500+645+262")
        top.title("Proyecto 1 - FeedForward")
        top.configure(background="#e0ebf3")
        top.configure(highlightbackground="#912b33")
        top.configure(highlightcolor="black")

	# --------------------------------------------------------
    	# --------------- Labels estaticas  ----------------------
        self.VarLabel1 = Label(top)
        self.VarLabel1.place(relx=0.04, rely=0.05, height=18, width=106)
        self.VarLabel1.configure(activebackground="#f9f9f9")
        self.VarLabel1.configure(background="#498bff")
        self.VarLabel1.configure(text='Variables')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.04, rely=0.11, height=28, width=126)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor=E)
        self.Label2.configure(background="#7cbcff")
        self.Label2.configure(highlightbackground="#b9d9d9")
        self.Label2.configure(text='Input Layers:')

        self.InputL_Label1 = Label(top)
        self.InputL_Label1.place(relx=0.19, rely=0.11, height=28, width=36)
        self.InputL_Label1.configure(activebackground="#f9f9f9")
        self.InputL_Label1.configure(background="#ffffff")
        self.InputL_Label1.configure(text='784')

        self.Label5 = Label(top)
        self.Label5.place(relx=0.26, rely=0.11, height=28, width=136)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(anchor=E)
        self.Label5.configure(background="#7cbcff")
        self.Label5.configure(highlightbackground="#b9d9d9")
        self.Label5.configure(text='Hidden Layers:')

        self.VarLabel2 = Label(top)
        self.VarLabel2.place(relx=0.67, rely=0.05, height=18, width=106)
        self.VarLabel2.configure(activebackground="#f9f9f9")
        self.VarLabel2.configure(background="#498bff")
        self.VarLabel2.configure(text='Log')
        self.VarLabel2.configure(width=106)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.04, rely=0.2, height=28, width=126)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(anchor=E)
        self.Label4.configure(background="#7cbcff")
        self.Label4.configure(highlightbackground="#b9d9d9")
        self.Label4.configure(text='''Output Layers:''')

        self.OutputL_Label1 = Label(top)
        self.OutputL_Label1.place(relx=0.19, rely=0.2, height=28, width=36)
        self.OutputL_Label1.configure(activebackground="#f9f9f9")
        self.OutputL_Label1.configure(background="#ffffff")
        self.OutputL_Label1.configure(text='''10''')

        self.Label6 = Label(top)
        self.Label6.place(relx=0.04, rely=0.34, height=38, width=126)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(background="#498bff")
        self.Label6.configure(highlightbackground="#b9d9d9")
        self.Label6.configure(text='Dataset')
        self.Label6.configure(width=126)

        self.Label7 = Label(top)
        self.Label7.place(relx=0.04, rely=0.48, height=38, width=126)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(background="#498bff")
        self.Label7.configure(highlightbackground="#b9d9d9")
        self.Label7.configure(text='Image')
   	# --------------- Labels estaticas  ----------------------
	# --------------------------------------------------------


	# --------------------------------------------------------
   	# ------------------ Labels variables --------------------
        self.HiddenL_Variable = StringVar()
        self.HiddenL_Label = Label(top, textvariable=self.HiddenL_Variable)
        self.HiddenL_Label.place(relx=0.43, rely=0.11, height=28, width=36)
        self.HiddenL_Label.configure(activebackground="#f9f9f9")
        self.HiddenL_Label.configure(background="#ffffff")
        self.HiddenL_Label.configure(cursor="fleur")
        self.HiddenL_Variable.set(u"25")

        self.HidLVar = StringVar()
        self.HiddenEntry = Entry(top, textvariable=self.HidLVar)
        self.HiddenEntry.place(relx=0.43, rely=0.2, relheight=0.07
                , relwidth=0.04)
        self.HiddenEntry.configure(background="white")
        self.HiddenEntry.configure(font="TkFixedFont")
        self.HiddenEntry.configure(selectbackground="#c4c4c4")

        self.LoadResLabel = Label(top)
        self.LoadResLabel.place(relx=0.31, rely=0.34, height=38, width=146)
        self.LoadResLabel.configure(activebackground="#f9f9f9")
        self.LoadResLabel.configure(background="#ffffff")
        self.LoadResLabel.configure(width=146)
   	# ------------------ Labels variables --------------------
	# --------------------------------------------------------


	# -------------------------------------------------
   	# ------------------ BOTONES ----------------------
        self.ChangeHiddenButton = Button(top)
        self.ChangeHiddenButton.place(relx=0.26, rely=0.2, height=26, width=112)
        self.ChangeHiddenButton.configure(activebackground="#09d8f9")
        self.ChangeHiddenButton.configure(background="#49c4ff")
        self.ChangeHiddenButton.configure(highlightbackground="#09d8f9")
        self.ChangeHiddenButton.configure(text='CHANGE')
        self.ChangeHiddenButton.configure(command=self.ChangeHidden)


        self.LoadDatasetButton = Button(top)
        self.LoadDatasetButton.place(relx=0.19, rely=0.34, height=37, width=95)
        self.LoadDatasetButton.configure(activebackground="#09d8f9")
        self.LoadDatasetButton.configure(background="#49c4ff")
        self.LoadDatasetButton.configure(highlightbackground="#09d8f9")
        self.LoadDatasetButton.configure(text='LOAD')
        self.LoadDatasetButton.configure(width=95)
        self.LoadDatasetButton.configure(command=self.LoadDataset)

        self.ShowImageButton = Button(top)
        self.ShowImageButton.place(relx=0.19, rely=0.48, height=37, width=245)
        self.ShowImageButton.configure(activebackground="#09d8f9")
        self.ShowImageButton.configure(background="#49c4ff")
        self.ShowImageButton.configure(highlightbackground="#09d8f9")
        self.ShowImageButton.configure(text='SHOW')
        self.ShowImageButton.configure(width=245)
        self.ShowImageButton.configure(command=self.ShowRandomImage)
   	# ------------------ BOTONES ----------------------
	# -------------------------------------------------


	# -------------------------------------------------
   	# ------------------ LOG BOX ----------------------
        self.LogBox = ScrolledText(top)
        self.LogBox.place(relx=0.51, rely=0.11, relheight=0.81, relwidth=0.46)
        self.LogBox.configure(background="white")
        self.LogBox.configure(font="TkTextFont")
        self.LogBox.configure(highlightbackground="wheat")
        self.LogBox.configure(insertborderwidth="3")
        self.LogBox.configure(selectbackground="#c4c4c4")
        self.LogBox.configure(state=DISABLED)
        self.LogBox.configure(width=10)
        self.LogBox.configure(wrap=NONE)
   	# ------------------ LOG BOX ----------------------
	# -------------------------------------------------


	# -------------------------------------------------
   	# ------------------ Bordes  ----------------------
        self.Frame1 = Frame(top)
        self.Frame1.place(relx=0.02, rely=0.3, relheight=0.01, relwidth=0.46)
        self.Frame1.configure(relief=GROOVE,borderwidth="2",background="#24306c")

        self.Frame2 = Frame(top)
        self.Frame2.place(relx=0.02, rely=0.45, relheight=0.01, relwidth=0.46)
        self.Frame2.configure(relief=GROOVE,borderwidth="2",background="#24306c")

        self.Frame4 = Frame(top)
        self.Frame4.place(relx=0.48, rely=0.02, relheight=0.94, relwidth=0.005)
        self.Frame4.configure(relief=GROOVE,borderwidth="1",background="#24306c")

        self.Frame6 = Frame(top)
        self.Frame6.place(relx=0.02, rely=0.02, relheight=0.94, relwidth=0.005)
        self.Frame6.configure(relief=GROOVE,borderwidth="1",background="#24306c")

        self.Frame8 = Frame(top)
        self.Frame8.place(relx=0.02, rely=0.95, relheight=0.01, relwidth=0.96)
        self.Frame8.configure(relief=GROOVE,borderwidth="2",background="#24306c")

        self.Frame10 = Frame(top)
        self.Frame10.place(relx=0.98, rely=0.02, relheight=0.94, relwidth=0.005)
        self.Frame10.configure(relief=GROOVE,borderwidth="1",background="#24306c")

        self.Frame12 = Frame(top)
        self.Frame12.place(relx=0.02, rely=0.02, relheight=0.01, relwidth=0.96)
        self.Frame12.configure(relief=GROOVE,borderwidth="2",background="#24306c")

        self.Frame3 = Frame(top)
        self.Frame3.place(relx=0.02, rely=0.59, relheight=0.01, relwidth=0.46)
	self.Frame3.configure(relief=GROOVE, borderwidth="2",background="#24306c")
   	# ------------------ Bordes  ----------------------
	# -------------------------------------------------


    	# --------------- Inicializacion de Datos ----------------------
    	self.mndata = MNIST('./dataset/')  # Carga Dataset
    	#print('Training Set cargado correctamente. Dimensiones: '+str(np.shape(self.trainImg)))
    	self.dData = displayData()         # Muestra un numero aleatorio del Dataset
	self.traingImg = None
	self.trainLabel = None
	self.testImg = None
	self.testLabel = None
   	#print('Clase displayData correctamente inicializada...')
    	# cargar dataset


    # ----------------------------------------------------------
    # --------------- Acciones de Botones ----------------------

    # -- Cambiar Hidden Layer -- 
    def ChangeHidden(self):
        self.HiddenL_Variable.set(self.HiddenEntry.get())
	self.HidLVar.set(u"")
	sys.stdout.flush()

    # -- Mostrar Imagen Random -- 
    def ShowRandomImage(self):
	self.dData.showOneRandom(self.trainImg, self.trainLabel)
	sys.stdout.flush()

    # -- Cargar Dataset --
    def LoadDataset(self):
	self.InsertInLog('Loading Dataset...\n')
	t = THD.Thread(target=self.LoadTraining)
	t.start()
	t2 = THD.Thread(target=self.LoadTesting)
	t2.start()

    def LoadTraining(self):
	self.trainImg, self.trainLabel = self.mndata.load_training()
	self.InsertInLog('...Training Dataset loaded successfuly.\n'
			    +'--> Dimensions: '+str(np.shape(self.trainImg))+'\n' )

    def LoadTesting(self):
	self.testImg, self.testLabel = self.mndata.load_testing()
	self.InsertInLog('...Testing Dataset loaded successfuly.\n'
			    +'--> Dimensions: '+str(np.shape(self.testImg))+'\n' )

    def InsertInLog(self, text):
        self.LogBox.configure(state=NORMAL)
    	self.LogBox.insert(INSERT, text)
        self.LogBox.configure(state=DISABLED)
    # --------------- Acciones de Botones ----------------------
    # ----------------------------------------------------------




# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



